package ${package}.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import ${package}.dao.${className}Dao;
import ${package}.domain.${className}DO;
import ${package}.service.${className}Service;



@Service
@Transactional(rollbackFor = Exception.class)
public class ${className}ServiceImpl implements ${className}Service {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ${className}Mapper ${classname}Mapper;

    /**
     * 根据id获取详情
     */
    @Override
    public ${className} detail(${pk.attrType} ${pk.attrname}) {
        return ${classname}Mapper.get(${pk.attrname});
    }

    /**
     * 分页
     */
    @Override
    public PageInfo<${className}> page(Query query, ${className}VO ${classname}) {
        PageHelper.startPage(query.getPage(), query.getLimit());
        List<${className}> ${classname}List = ${classname}Mapper.list(${classname});
        return new PageInfo<${className}>(${classname}List);
    }

    /**
     * 列表
     */
    @Override
    public List<${className}> list(${className}VO ${classname}) {
        List<${className}> ${classname}List = ${classname}Mapper.list(${classname});
        return ${classname}List;
    }

    /**
     * 保存
     */
    @Override
    public Boolean save(${className}VO ${classname}) {
        Integer count = ${classname}Mapper.insert(${classname});
        if(count == 0) {
            throw new RuntimeException("保存失败");
        }
        return true;
    }

    /**
     * 批量保存
     */
    @Override
    public Boolean batchSave(List<${className}VO> ${classname}s) {

        if(null == ${classname}s || ${classname}s.size() == 0) {
            throw new RuntimeException("请传入数据");
        }
        Integer count = ${classname}Mapper.batchInsert(${classname}s);

        if(count != ${classname}s.size()) {
            throw new RuntimeException("保存失败");
        }
        return true;
    }

    /**
     * 更新
     */
    @Override
    public Boolean update(${className}VO ${classname}) {
        ${className}  current${className} = ${classname}Mapper.get(${classname}.get${pk.attrname}());
        if(null == current${className}) {
            throw new RuntimeException("记录不存在");
        }
        Integer count = ${classname}Mapper.update(${classname});
        if(count == 0) {
            throw new RuntimeException("保存失败");
        }
        return true;
    }

    /**
     * 更新状态
     */
    @Override
    public Boolean updateStatus(${pk.attrType} ${pk.attrname}) {
        //查询记录
        ${className}  current${className} = ${classname}Mapper.get(${classname}.get${pk.attrname}());
        if(null == current${className}) {
            throw new RuntimeException("记录不存在");
        }
        //构建更新实体
        ${className} ${classname} = new ${className}();
        ${classname}.set${pk.attrname}(${pk.attrname});
        ${className}.setStatus(1);

        //更新
        Integer count = ${classname}Mapper.update(${classname});
        if(count == 0) {
            throw new RuntimeException("保存失败");
        }
        return true;
    }

    /**
     * 删除
     */
    @Override
    public Boolean remove(${pk.attrType} ${pk.attrname}) {
        //查询记录
        ${className}  current${className} = ${classname}Mapper.get(${classname}.get${pk.attrname}());
        if(null == current${className}) {
            throw new RuntimeException("记录不存在");
        }

        //更新
        Integer count = ${classname}Mapper.remove(${pk.attrname});
        if(count == 0) {
            throw new RuntimeException("保存失败");
        }
        return true;
    }

    /**
     * 批量删除
     */
    @Override
    public Boolean batchRemove(${pk.attrType}[] ${pk.attrname}s) {
        //查询记录
        ${className}  current${className} = ${classname}Mapper.get(${classname}.get${pk.attrname}());
        if(null == current${className}) {
            throw new RuntimeException("记录不存在");
        }

        //更新
        Integer count = ${classname}Mapper.batchRemove(${pk.attrname});

        if(count != ${pk.attrname}s.length) {
            throw new RuntimeException("删除失败");
        }
        return true;
    }

}
